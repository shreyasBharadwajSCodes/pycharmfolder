from stable_baselines3 import PPO
from models.smart_grid_env import SmartGridEnv
import matplotlib.pyplot as plt

def train_rl_agent(env):
    model = PPO('MlpPolicy', env, verbose=1)
    model.learn(total_timesteps=10000)
    return model


env = SmartGridEnv(sim_file='../data/load_details/simulation_20240522_181652_file.xlsx',
                   solar_file='../data/solar_generated_02-05-2024_10_0.2.xlsx', solarcost=10)
from stable_baselines3 import PPO
from stable_baselines3.common.callbacks import CheckpointCallback, EvalCallback
# Define the PPO model with increased exploration
model = PPO(
    "MlpPolicy",
    env,
    verbose=1,
    ent_coef=0.01,  # Increase entropy coefficient to encourage exploration
    learning_rate=3e-4,  # Learning rate
    n_steps=2048,  # Number of steps to run for each environment per update
    batch_size=64,  # Minibatch size
    n_epochs=10,  # Number of epochs to update the policy
    gamma=0.99,  # Discount factor
    clip_range=0.2,  # Clipping range
)

# Define callbacks
checkpoint_callback = CheckpointCallback(save_freq=1000, save_path='../data/models_ppo/', name_prefix='ppo_smart_grid')
eval_callback = EvalCallback(env, best_model_save_path='./logs/best_model', log_path='./logs/results', eval_freq=500, deterministic=True, render=False)

# Train the model
model.learn(total_timesteps=10000, callback=[checkpoint_callback, eval_callback])

# Save the model
model.save("ppo_smart_grid_model")


obs = env.reset()
for i in range(2000):
    action, _states = model.predict(obs, deterministic=True)
    obs, reward, done, info = env.step(action)
    print(reward)
    if done:
        obs = env.reset()

# Load the trained model
#model = PPO.load("ppo_smart_grid_model")


def run_model_on_new_data(model, sim_file, solar_file, solarcost_kwh):
    env = SmartGridEnv(sim_file, solar_file, solarcost_kwh)
    obs = env.reset()

    utilization_data = []
    demand_met_data = []
    reward_data = []
    penalty_data = []

    for _ in range(len(env.smart_grid.final_df)):
        action, _states = model.predict(obs, deterministic=True)
        obs, reward, done, _ = env.step(action)

        if env.smart_grid.time_step >= len(env.smart_grid.final_df):
            break

        # Collect utilization data
        battery_state = env.smart_grid.battery.get_state()
        chp_state = env.smart_grid.chp.get_state()
        em_state = env.smart_grid.em.get_purchased_at_current_step()
        pg_state = env.smart_grid.pg.get_state()
        prior_purchased_state = env.smart_grid.ppm.get_state(env.smart_grid.time_step)
        solar_output = env.smart_grid.final_df['Solar kw/min'].iloc[env.smart_grid.time_step]

        utilization = {
            'battery': battery_state,
            'chp': chp_state,
            'electric_market': em_state,
            'public_grid': pg_state,
            'prior_purchased': prior_purchased_state,
            'solar_output': solar_output
        }
        utilization_data.append(utilization)

        # Collect demand met
        demand = env.smart_grid.final_df['Total_current_demand'].iloc[env.smart_grid.time_step]
        supplied_energy = sum(
            [battery_state[0], chp_state[0], em_state['electricity_output'], pg_state[0], prior_purchased_state,
             solar_output])
        demand_met = min(supplied_energy, demand)
        demand_met_data.append(demand_met)

        # Collect reward and penalty
        reward_data.append(reward)
        penalty_data.append(abs(reward - env._calculate_reward(action)[1]))

        if done:
            break

    return utilization_data, demand_met_data, reward_data, penalty_data


def test_model_on_multiple_datasets(model, datasets, solarcost_kwh):
    results = {}
    for dataset in datasets:
        sim_file = dataset['sim_file']
        solar_file = dataset['solar_file']

        utilization_data, demand_met_data, reward_data, penalty_data = run_model_on_new_data(model, sim_file,
                                                                                             solar_file, solarcost_kwh)
        results[dataset['name']] = {
            'utilization_data': utilization_data,
            'demand_met_data': demand_met_data,
            'reward_data': reward_data,
            'penalty_data': penalty_data
        }

    return results


import matplotlib.pyplot as plt


def plot_results(results):
    for dataset_name, data in results.items():
        utilization_data = data['utilization_data']
        demand_met_data = data['demand_met_data']
        reward_data = data['reward_data']
        penalty_data = data['penalty_data']

        time_steps = range(len(demand_met_data))

        plt.figure(figsize=(14, 8))

        # Plot Demand Met
        plt.subplot(2, 2, 1)
        plt.plot(time_steps, demand_met_data, label='Demand Met', color='blue')
        plt.xlabel('Time Step')
        plt.ylabel('Demand Met')
        plt.title(f'Demand Met over Time - {dataset_name}')
        plt.legend()

        # Plot Reward
        plt.subplot(2, 2, 2)
        plt.plot(time_steps, reward_data, label='Reward', color='green')
        plt.xlabel('Time Step')
        plt.ylabel('Reward')
        plt.title(f'Reward over Time - {dataset_name}')
        plt.legend()

        # Plot Penalty
        plt.subplot(2, 2, 3)
        plt.plot(time_steps, penalty_data, label='Penalty', color='red')
        plt.xlabel('Time Step')
        plt.ylabel('Penalty')
        plt.title(f'Penalty over Time - {dataset_name}')
        plt.legend()

        plt.tight_layout()
        plt.show()

        # Plot utilization graphs separately as percentages of total demand
        plt.figure(figsize=(14, 10))

        plt.subplot(3, 2, 1)
        battery_utilization = [(utilization['battery'][0] / demand_met_data[i]) * 100 for i, utilization in
                               enumerate(utilization_data)]
        plt.plot(time_steps, battery_utilization, label='Battery', color='yellow')
        plt.ylim(0, 100)
        plt.xlabel('Time Step')
        plt.ylabel('Battery Utilization (%)')
        plt.title(f'Battery Utilization over Time - {dataset_name}')
        plt.legend()

        plt.subplot(3, 2, 2)
        chp_utilization = [(utilization['chp'][0] / demand_met_data[i]) * 100 for i, utilization in
                           enumerate(utilization_data)]
        plt.plot(time_steps, chp_utilization, label='CHP', color='orange')
        plt.ylim(0, 100)
        plt.xlabel('Time Step')
        plt.ylabel('CHP Utilization (%)')
        plt.title(f'CHP Utilization over Time - {dataset_name}')
        plt.legend()

        plt.subplot(3, 2, 3)
        em_utilization = [(utilization['electric_market']['electricity_output'] / demand_met_data[i]) * 100 for
                          i, utilization in enumerate(utilization_data)]
        plt.plot(time_steps, em_utilization, label='Electric Market', color='cyan')
        plt.ylim(0, 100)
        plt.xlabel('Time Step')
        plt.ylabel('Electric Market Utilization (%)')
        plt.title(f'Electric Market Utilization over Time - {dataset_name}')
        plt.legend()

        plt.subplot(3, 2, 4)
        pg_utilization = [(utilization['public_grid'][0] / demand_met_data[i]) * 100 for i, utilization in
                          enumerate(utilization_data)]
        plt.plot(time_steps, pg_utilization, label='Public Grid', color='purple')
        plt.ylim(0, 100)
        plt.xlabel('Time Step')
        plt.ylabel('Public Grid Utilization (%)')
        plt.title(f'Public Grid Utilization over Time - {dataset_name}')
        plt.legend()

        plt.subplot(3, 2, 5)
        prior_purchased_utilization = [(utilization['prior_purchased'] / demand_met_data[i]) * 100 for i, utilization in
                                       enumerate(utilization_data)]
        plt.plot(time_steps, prior_purchased_utilization, label='Prior Purchased', color='pink')
        plt.ylim(0, 100)
        plt.xlabel('Time Step')
        plt.ylabel('Prior Purchased Utilization (%)')
        plt.title(f'Prior Purchased Utilization over Time - {dataset_name}')
        plt.legend()

        plt.subplot(3, 2, 6)        solar_utilization = [(utilization['solar_output'] / demand_met_data[i]) * 100 for i, utilization in
                             enumerate(utilization_data)]
        plt.plot(time_steps, solar_utilization, label='Solar Output', color='lightgreen')
        plt.ylim(0, 100)
        plt.xlabel('Time Step')
        plt.ylabel('Solar Output Utilization (%)')
        plt.title(f'Solar Output Utilization over Time - {dataset_name}')
        plt.legend()

        plt.tight_layout()
        plt.show()


# Define your datasets
datasets = [
    {'name': 'Dataset1', 'sim_file': '../data/load_details/simulation_file_20240523_150402.xlsx', 'solar_file': '../data/solar_generated_02-02-2024_10_0.15.xlsx'},
    #{'name': 'Dataset2', 'sim_file': 'path_to_sim_file2.csv', 'solar_file': 'path_to_solar_file2.csv'},
    # Add more datasets as needed
]

model = PPO.load("ppo_smart_grid_model")

# Test the model on multiple datasets
results = test_model_on_multiple_datasets(model, datasets, solarcost_kwh=0.1)

# Plot the results
plot_results(results)

