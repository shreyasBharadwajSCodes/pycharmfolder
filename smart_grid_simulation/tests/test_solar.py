import unittest
from smart_grid_simulation.src.models.solar_model import SolarModel  # Replace 'your_module_name' with the actual module name
import pandas as pd
from datetime import datetime
import os

class TestSolarModel(unittest.TestCase):
    def setUp(self):
        # Initialize a sample SolarModel instance for testing
        self.solar_model = SolarModel(cost_per_kwh=0.1)

    def test_calculate_cost_at_timestep(self):
        # Create a sample DataFrame similar to the one generated by SolarCellData
        data = {
            'Time': pd.date_range(start='2024-05-01 00:00:00', freq='1min', periods=1440),
            'Electricity_generated (KW/min)': [10] * 1440  # Assuming constant electricity generation for simplicity
        }
        df = pd.DataFrame(data)
        self.solar_model.solar_df = df  # Set the solar_df attribute for testing

        # Test cost calculation for a valid timestep
        cost = self.solar_model.calculate_cost_at_timestep(100)  # Assuming index 100 exists in the DataFrame
        self.assertEqual(cost, 1)  # Expected cost = 10 * 0.1 / 60 = 0.1666, rounded up = 1

        # Test ValueError for out-of-range index
        with self.assertRaises(ValueError):
            self.solar_model.calculate_cost_at_timestep(2000)  # Assuming index 2000 is out of range

    def test_generate_solar_data_excel(self):
        # Define sample solar_parameters for generating solar data
        solar_parameters = {
            'latitude': 40.7128,
            'longitude': -74.0060,
            'efficiency': 0.2,
            'num_cells': 100,
            'date': datetime.now().strftime('%Y-%m-%d'),
            'tz': 'America/New_York'
        }

        # Test generating solar data and saving to Excel
        df = self.solar_model.generate_solar_data_excel(solar_parameters, path='test_data.xlsx')
        self.assertIsInstance(df, pd.DataFrame)  # Check if DataFrame is returned
        self.assertTrue(self.solar_model.excel_file_path.endswith('.xlsx'))  # Check if Excel file path is set

    def test_get_file(self):
        # Test loading data from an existing Excel file
        df = self.solar_model.get_file('test_data.xlsx_2024-05-03_100_0.2.xlsx')
        self.assertIsInstance(df, pd.DataFrame)  # Check if DataFrame is returned

        # Test handling non-existent file
        with self.assertRaises(Exception):  # Replace Exception with specific exception type if possible
            self.solar_model.get_file('non_existent_file.xlsx')

    def tearDown(self):
        # Clean up resources after testing
        if os.path.exists('test_data.xlsx'):
            os.remove('test_data.xlsx')  # Remove the test Excel file created during testing

if __name__ == '__main__':
    unittest.main()
